package wk.leetcode.t31;

/**
 * 实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。
 * 如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。
 * 必须原地修改，只允许使用额外常数空间。
 * 以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
 * 1,2,3 → 1,3,2
 * 3,2,1 → 1,2,3
 * 1,1,5 → 1,5,1
 * 
 * 正确题解:
 * 先找出最大的索引 k 满足 nums[k] < nums[k+1]，如果不存在，就翻转整个数组；
 * 再找出另一个最大索引 l 满足 nums[l] > nums[k]；
 * 交换 nums[l] 和 nums[k]；
 * 最后翻转 nums[k+1:]。
 * 
 * WK: 
 *  如果数列为倒序，说明该序列已经为最大，再怎么调整，都会变小
 *  将倒序数列翻转，会变成最小的数列
 * 
*/
public class Solution {

    public void nextPermutation(int[] nums) {
        
    }

}